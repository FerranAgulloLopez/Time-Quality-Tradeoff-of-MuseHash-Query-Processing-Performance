float:
  any:
    bruteforce:
      disabled: true
      docker-tag: ann-benchmarks-sklearn
      module: ann_benchmarks.algorithms.bruteforce
      constructor: BruteForce
      base-args: ["@metric"]
      run-groups:
        bruteforce:
          args: [[-1]]
    bruteforce-cuda:
      disabled: true
      docker-tag: ann-benchmarks-sklearn
      module: ann_benchmarks.algorithms.bruteforce_cuda
      constructor: BruteForceCuda
      base-args: ["@metric"]
      run-groups:
        bruteforce:
          args: []
    bruteforce-cuda-distributed:
      disabled: true
      docker-tag: ann-benchmarks-sklearn
      module: ann_benchmarks.algorithms.bruteforce_cuda_distributed
      constructor: BruteForceCudaDistributed
      base-args: [ "@metric" ]
      run-groups:
        bruteforce:
          args: [ ]
    bruteforce-blas:
      docker-tag: ann-benchmarks-sklearn
      module: ann_benchmarks.algorithms.bruteforce
      constructor: BruteForceBLAS
      base-args: ["@metric"]
      run-groups:
        empty:
          args: []
  euclidean:
    vamana(diskann):
      docker-tag: ann-benchmarks-diskann
      module: ann_benchmarks.algorithms.diskann
      constructor: Vamana
      base-args : ["@metric"]
      run-groups :
        vamana_100_64_1-2:
           args : [{'l_build': 100, 'max_outdegree': 64, 'alpha': 1.2}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
        vamana_100_64_1-1:
           args : [{'l_build': 100, 'max_outdegree': 64, 'alpha': 1.1}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
        vamana_100_64_1:
           args : [{'l_build': 100, 'max_outdegree': 64, 'alpha': 1}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
        vamana_125_32_1-2:
           args : [{'l_build': 125, 'max_outdegree': 32, 'alpha': 1.2}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
        vamana_125_32_1-1:
           args : [{'l_build': 125, 'max_outdegree': 32, 'alpha': 1.1}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
        vamana_125_32_1:
           args : [{'l_build': 125, 'max_outdegree': 32, 'alpha': 1}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
    vamana-pq(diskann):
      docker-tag: ann-benchmarks-diskann_pq
      module: ann_benchmarks.algorithms.diskann
      constructor: VamanaPQ
      base-args : ["@metric"]
      run-groups :
        vamana_pq_100_64_1-2_32:
           args : [{'l_build': 100, 'max_outdegree': 64, 'alpha': 1.2, 'chunks': 32}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
        vamana_pq_100_64_1_32:
           args : [{'l_build': 100, 'max_outdegree': 64, 'alpha': 1, 'chunks': 32}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
        vamana_pq_80_64_1-2_96:
           args : [{'l_build': 80, 'max_outdegree': 64, 'alpha': 1.2, 'chunks': 96}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
        vamana_pq_80_64_1_96:
           args : [{'l_build': 80, 'max_outdegree': 64, 'alpha': 1, 'chunks': 96}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
        vamana_pq_80_64_1-2_112:
           args : [{'l_build': 80, 'max_outdegree': 64, 'alpha': 1.2, 'chunks': 112}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
        vamana_pq_80_64_1_112:
           args : [{'l_build': 80, 'max_outdegree': 64, 'alpha': 1, 'chunks': 112}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
        vamana_pq_125_32_1-2_32:
           args : [{'l_build': 125, 'max_outdegree': 32, 'alpha': 1.2, 'chunks': 32}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
        vamana_pq_125_32_1_32:
           args : [{'l_build': 125, 'max_outdegree': 32, 'alpha': 1, 'chunks': 32}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
        vamana_pq_125_32_1-2_96:
           args : [{'l_build': 125, 'max_outdegree': 32, 'alpha': 1.2, 'chunks': 96}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
        vamana_pq_125_32_1_96:
           args : [{'l_build': 125, 'max_outdegree': 32, 'alpha': 1, 'chunks': 96}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
        vamana_pq_125_32_1-2_112:
           args : [{'l_build': 125, 'max_outdegree': 32, 'alpha': 1.2, 'chunks': 112}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
        vamana_pq_125_32_1_112:
           args : [{'l_build': 125, 'max_outdegree': 32, 'alpha': 1, 'chunks': 112}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
    kgraph:
      disable: true
      docker-tag: ann-benchmarks-kgraph
      module: ann_benchmarks.algorithms.kgraph
      constructor: KGraph
      base-args: ["@metric"]
      run-groups:
        kgraph:
          args: [ {'reverse': -1}, True] # XXX: hard-codes save_index as True
          query-args: [[1, 2, 3, 4, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]]
    hnsw(nmslib):
      docker-tag: ann-benchmarks-nmslib
      module: ann_benchmarks.algorithms.nmslib
      constructor: NmslibReuseIndex
      base-args: ["@metric", "hnsw"]
      run-groups:
        M-32:
          # If a run group has an array called @arg-groups instead of one
          # called @args, then every element in that array will be separately
          # expanded before then taking the Cartesian product of all of those
          # expansions.
          #
          # Yes, this is a bit of a hack, but some constructors are weird.
          # (This one used to require that dictionaries be encoded as lists
          # of environment variable-style strings -- ["M=32", "post=2",
          # "efConstruction=400"] -- which didn't work with this at all...)
          arg-groups:
            - {"M": 32, "post": 2, "efConstruction": 400}
            - False
          query-args: [[20, 30, 40, 50, 60, 70, 80, 90, 100, 120, 140, 160, 200,
              300, 400]]
        M-20:
          arg-groups:
            - {"M": 20, "post": 2, "efConstruction": 400}
            - False
          query-args: [[2, 5, 10, 15, 20, 30, 40, 50, 70, 80, 120, 200, 400]]
        M-12:
          arg-groups:
            - {"M": 12, "post": 0, "efConstruction": 400}
            - False
          query-args: [[1, 2, 5, 10, 15, 20, 30, 40, 50, 70, 80, 120]]
        M-4:
          arg-groups:
            - {"M": 4, "post": 0, "efConstruction": 400}
            - False
          query-args: [[1, 2, 5, 10, 20, 30, 50, 70, 90, 120]]
        M-8:
          arg-groups:
            - {"M": 8, "post": 0, "efConstruction": 400}
            - False
          query-args: [[1, 2, 5, 10, 20, 30, 50, 70, 90, 120, 160]]
    pynndescent:
      docker-tag: ann-benchmarks-pynndescent
      module: ann_benchmarks.algorithms.pynndescent
      constructor: PyNNDescent
      base-args: ["@metric"]
      run-groups:
        NN-10:
          arg-groups:
            - {"n_neighbors": 10, "diversify_prob": 1.0,
               "pruning_degree_multiplier":[0.5, 1.0], "leaf_size": 24}
          query-args: [[0.0, 0.01, 0.02, 0.03, 0.04, 0.06, 0.08, 0.10, 0.12]]
        NN-20:
          arg-groups:
            - {"n_neighbors": 20, "diversify_prob": 1.0,
               "pruning_degree_multiplier":[0.75, 1.5], "leaf_size": 24}
          query-args: [[0.0, 0.02, 0.04, 0.06, 0.08, 0.10, 0.12, 0.14, 0.16, 0.20]]
        NN-40:
          arg-groups:
            - {"n_neighbors": 40, "diversify_prob": [0.0, 1.0],
               "pruning_degree_multiplier":[1.0, 2.0], "leaf_size": 36}
          query-args: [[0.0, 0.02, 0.04, 0.08, 0.12, 0.16, 0.20, 0.24, 0.28, 0.32]]
        NN-60:
          arg-groups:
            - {"n_neighbors": 60, "diversify_prob": 0.0,
               "pruning_degree_multiplier":[2.0, 3.0], "leaf_size": 48}
          query-args: [[0.0, 0.04, 0.08, 0.12, 0.16, 0.20, 0.24, 0.28, 0.32, 0.36]]
bit:
  hamming:
    mih:
      docker-tag: ann-benchmarks-mih
      module: ann_benchmarks.algorithms.subprocess
      constructor: BitSubprocessPrepared
      base-args: [["mih/bin/mihwrapper"]]
      disabled: True
      run-groups:
        base:
          # Note that MIH assumes that 5 <= dimension / chunks <= 37 and segfaults otherwise.
          # This parameter space is explored below using the `chunk-factor`.
          # A factor of 0 means that dimension / chunks = 5 which proceeds linearly to
          # dimension / chunks = 37 for a factor of 1.
          # The r parameter denotes a reordering with n / r steps. If r is 0, no reordering
          # takes places. Otherwise, n / r points from the dataset are used for a
          # re-ording process. MIH requires either r = 0 or r >= 2.
          args: { "d" : "@dimension", "r" : [0, 2, 3],
            "chunk-factor" : [0.2, 0.5, 0.8] }
    kgraph:
      disable: true
      docker-tag: ann-benchmarks-kgraph
      module: ann_benchmarks.algorithms.kgraph
      constructor: KGraph
      base-args: ["euclidean"]
      run-groups:
        kgraph:
          args: [[1, 2, 3, 4, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100],
                 {'reverse': -1, "K": 200, "L": 300, "S": 20}, False]
    hnsw(nmslib):
      docker-tag: ann-benchmarks-nmslib
      module: ann_benchmarks.algorithms.nmslib
      constructor: NmslibReuseIndex
      base-args: ["euclidean", "hnsw"]
      run-groups:
        M-48:
          arg-groups:
            - {"M": 48, "post": 2, "efConstruction": 800}
            - False
          query-args: [[50, 70, 90, 120, 160, 200, 400, 600, 700, 800, 1000,
              1400, 1600, 2000]]
        M-32:
          arg-groups:
            - {"M": 32, "post": 2, "efConstruction": 800}
            - False
          query-args: [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 120, 140, 160,
              200, 300, 400, 600, 700, 800, 1000, 1200, 1400, 1600, 2000]]
        M-20:
          arg-groups:
            - {"M": 20, "post": 0, "efConstruction": 800}
            - False
          query-args: [[2, 5, 10, 15, 20, 30, 40, 50, 70, 80]]
        M-12:
          arg-groups:
            - {"M": 12, "post": 0, "efConstruction": 800}
            - False
          query-args: [[1, 2, 5, 10, 15, 20, 30, 40, 50, 70, 80]]
    pynndescent:
      docker-tag: ann-benchmarks-pynndescent
      module: ann_benchmarks.algorithms.pynndescent
      constructor: PyNNDescent
      base-args: ["@metric"]
      run-groups:
        NN-20:
          arg-groups:
            - {"n_neighbors": [20], "diversify_prob": [0.75, 1.0],
               "pruning_degree_multiplier":[1.0, 1.5], leaf_size: 32}
          query-args: [[0.0, 0.01, 0.02, 0.04, 0.08, 0.12, 0.16]]
        NN-40:
          arg-groups:
            - {"n_neighbors": [40], "diversify_prob": [0.5, 1.0],
               "pruning_degree_multiplier":[1.5, 2.0], leaf_size: 48}
          query-args: [[0.0, 0.04, 0.08, 0.12, 0.16, 0.20, 0.24]]
        NN-80:
          arg-groups:
            - {"n_neighbors": [80], "diversify_prob": [0.25, 1.0],
               "pruning_degree_multiplier":[1.75, 2.25], leaf_size: 64}
          query-args: [[0.0, 0.08, 0.12, 0.16, 0.20, 0.24, 0.28, 0.32]]
        NN-120:
          arg-groups:
            - {"n_neighbors": [120], "diversify_prob": [0.0, 1.0],
               "pruning_degree_multiplier":[2.0, 2.5], leaf_size: 80}
          query-args: [[0.08, 0.16, 0.20, 0.24, 0.28, 0.32, 0.36]]
  jaccard:
    bf:
      docker-tag: ann-benchmarks-sklearn
      module: ann_benchmarks.algorithms.bruteforce
      constructor: BruteForceBLAS
      base-args: ["@metric"]
      run-groups:
        base:
          args: {}
    datasketch:
      docker-tag: ann-benchmarks-datasketch
      module: ann_benchmarks.algorithms.datasketch
      constructor: DataSketch
      base-args: ["@metric"]
      run-groups:
        base:
          args:  [[128, 256, 512],[8, 16, 32, 64, 128]]
    puffinn:
      docker-tag: ann-benchmarks-puffinn
      module: ann_benchmarks.algorithms.puffinn
      constructor: Puffinn
      base-args: ["@metric"]
      run-groups:
        base:
            args: [
              [ 16000000, 512000000],
              ['1bit_minhash'],
            ]
            query-args: [[0.1, 0.2, 0.5, 0.7, 0.9, 0.95, 0.99]]
    pynndescent:
      docker-tag: ann-benchmarks-pynndescent
      module: ann_benchmarks.algorithms.pynndescent
      constructor: PyNNDescent
      base-args: ["@metric"]
      run-groups:
        NN-20:
          arg-groups:
            - {"n_neighbors": 20, "diversify_prob": [0.75, 1.0],
               "pruning_degree_multiplier": 1.0, leaf_size: 30}
          query-args: [[0.0, 0.01, 0.02, 0.03, 0.04, 0.06, 0.08, 0.12, 0.16, 0.20]]
        NN-40:
          arg-groups:
            - {"n_neighbors": 40, "diversify_prob": [0.5, 1.0],
               "pruning_degree_multiplier": 1.0, leaf_size: 30}
          query-args: [[0.0, 0.01, 0.02, 0.03, 0.04, 0.06, 0.08, 0.12, 0.16, 0.20]]
        NN-80:
          arg-groups:
            - {"n_neighbors": 80, "diversify_prob": [1.0, 0.25],
               "pruning_degree_multiplier": 1.0, "leaf_size": 60}
          query-args: [[0.0, 0.02, 0.04, 0.06, 0.08, 0.12, 0.14, 0.16, 0.18, 0.20, 0.22]]
        NN-120:
          arg-groups:
            - {"n_neighbors": 120, "diversify_prob": [1.0, 0.125],
               "pruning_degree_multiplier": 1.0, "leaf_size": 80}
          query-args: [[0.0, 0.02, 0.04, 0.06, 0.08, 0.12, 0.14, 0.16, 0.18, 0.20, 0.22]]
    hnsw(nmslib):
      docker-tag: ann-benchmarks-nmslib
      module: ann_benchmarks.algorithms.nmslib
      constructor: NmslibReuseIndex
      base-args: ["@metric", "hnsw"]
      run-groups:
        M-48:
          arg-groups:
            - {"M": 48, "post": 2, "efConstruction": 800}
            - False
          query-args: [[50, 70, 90, 120, 160, 200, 400, 600, 700, 800, 1000,
              1400, 1600, 2000]]
        M-32:
          arg-groups:
            - {"M": 32, "post": 2, "efConstruction": 800}
            - False
          query-args: [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 120, 140, 160,
              200, 300, 400, 600, 700, 800, 1000, 1200, 1400, 1600, 2000]]
        M-20:
          arg-groups:
            - {"M": 20, "post": 0, "efConstruction": 800}
            - False
          query-args: [[2, 5, 10, 15, 20, 30, 40, 50, 70, 80]]
        M-12:
          arg-groups:
            - {"M": 12, "post": 0, "efConstruction": 800}
            - False
          query-args: [[1, 2, 5, 10, 15, 20, 30, 40, 50, 70, 80]]
